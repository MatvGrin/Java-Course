*Java технология представляет собой сочетание языка программирования, платформы
и различных фреймворков (программная среда специального назначения).
*Java – это строго типизированный объектно-ориентированный язык программирования,
который в свое время разработала компания Sun Microsystems.
*Java платформа – это комплекс аппаратного и программного обеспечения,
предназначенный для разработки и исполнения программ, написанных на языке Java.

//JDK — пакет инструментов разработчика (Java Development Kit).
//JRE — исполнительная система Java (Java Runtime Environment). Служит для организации процесса выполнения программ.
//JVM — виртуальная машина Java (Java Virtual Machine). Это абстрактная вычислительная машина, в арсенале которой есть свой набор команд и система управления памятью.

Процесс использования инструментов платформы Java представлен на рисунке ниже.
Согласно нему, исходная Java-программа должна сначала быть преобразована компилятором
в исполняемую программу в виде байт-кода. После этого байт-код Java-программы можно
запустить на исполнение в JVM, то есть байт-код интерпретируется/преобразуется в
машинный код той платформы, в которой используется JVM. Чтобы писать программы на
языке Java, знание особенностей байт-кода не обязательно. Однако понимание байт-кода,
а также процессов его генерации помогает Java-программисту в его работе.

                *****Свойства и преимущества java:*****
На сегодняшний день язык программирования Java не теряет актуальности, так как
обладает следующими свойствами.

                Простой
Си-подобный синтаксис и объектно-ориентированный стиль — вот основные факторы,
позволяющие с легкостью переходить на платформу Java и быстро разрабатывать приложения.

                Объектно-ориентированный
Java изначально спроектирована как объектно-ориентированный язык программирования.
И это оправдало себя: объектная парадигма стала основным трендом в мире разработки
программного обеспечения.

              Безопасный
"Java — это C++, из которого убрали все пистолеты, ножи и дубинки" — Джеймс Гослинг.
Java обеспечивает расширенную проверку во время компиляции, за которой следует
вторая проверка во время выполнения. Кроме того, модель управления памятью предельно
проста: указателей, определенных программистом, и арифметики указателей – нет;
организована автоматическая сборка объектов.

              Платформо-независимый
Компилятор Java генерирует байт-код, который интерпретируется в машинный код той
платформы, на которой запускается JVM. Одни и те же байтовые коды Java будут работать
на любой платформе!

              Многопоточный
Платформа Java поддерживает многопоточность на уровне языка, предоставляет эффективные
механизмы синхронизации, а также бесконфликтный доступ для параллельных потоков
выполнения.

              Динамический
Компилятор Java строго придерживается статической проверки во время компиляции,
язык и система исполнения являются динамическими. Классы связываются только по
мере необходимости. Новые модули кода могут быть подключены по запросу из различных
источников, в том числе и сети.

               Распределенный
Язык программирования Java изначально ориентировался на создание распределенных
сетевых приложений для конечных пользователей в различных средах, от встроенных
в сеть устройств до глобальной сети и настольных компьютеров.

///////JDK (Java Development Kit) – это комплект разработчика приложений на языке Java,
который включает://////////

-стандартные библиотеки классов Java
-компилятор
-документацию
-примеры
-исполнительную систему - JRE
-различные утилиты


                            Классификация
Классификация ключевых слов по критерию области их применения позволяет выделить
8 основных групп.

Нажмите на вкладки для детального рассмотрения ключевых слов Java.

        Группа 1 — Примитивные типы данных
Ключевые слова, обозначающие примитивные типы данных:

byte – целочисленный тип данных, занимающий всего один байт
short – целочисленный тип данных, короткое целое число
int – целочисленный тип данных, просто целое число
long – целочисленный тип данных, длинное целое число
char – символьный тип данных
float – тип данных для вещественных чисел (с плавающей точкой и одинарной точностью)
double – тип данных для вещественных чисел (с плавающей точкой и двойной точностью)
boolean – тип данных для логических значений
 Группа 2 — Ветвление и циклы
Ключевые слова, используемые в таких алгоритмических конструкциях как ветвление и циклы:

if – проверка условия для выполнения блока инструкций
else – выполнение альтернативного блока инструкций
switch – используется для определения параметра многовариантного ветвления
case – определяет метку и блок инструкций, который выполнится при совпадении
значения параметра многовариантного ветвления с меткой
default – определяет блок инструкций, который выполнится при несовпадении
значения параметра многовариантного ветвления ни с одной из указанных меток
while – определяет цикл, который повторяет блок инструкций, а также условие
продолжения цикла
do – определяет цикл, который повторяет блок инструкций
break – используется для выхода из некоторой конструкции
continue – используется для выхода из текущей итерации цикла и перехода к следующей
for – определяет цикл, который повторяет блок инструкций определенное количество раз
 Группа 3 — Модификаторы доступа
Ключевые слова, используемые для указания области видимости (модификаторы доступа):

private – указывает на то, что к методу или переменной класса не могут
обращаться элементы других классов
protected – указывает на то, что к методу или переменной класса могут
обращаться другие элементы данного класса, его подклассов или классов из того же пакета
public – указывает на то, что к методу или переменной класса могут
обращаться другие элементы любого класса
 Группа 4 — Объявление и импорт
Ключевые слова, используемые при объявлении, а также импорте:

import – указывает на классы и пакеты, которые будут импортированы (как опция,
импортированы статически)
package – объявляет пакет
class – объявляет класс
interface – объявляет интерфейс
enum – объявляет перечисление
extends – используется при объявлении класса и указывает на суперкласс
implements – используется при объявлении класса и указывает на интерфейс,
который будет реализовываться
static – указывает на то, что поля/методы класса могут быть использованы
без создания объекта
final – используется для создания констант (неизменяемых данных),
непереопределяемых методов, ненаследуемых классов
void – указывает на то, что метод не возвращает никакого значения
abstract – используется при объявлении классов и методов; такой класс не
может иметь экземпляров, а метод не имеет содержимого
native – сигнализирует о том, что метод реализован в платформо-зависимом
коде, часто на языке С; такой модификатор имеет, например, метод hashcode в Object
        Группа 5 — Создание, возврат и вызов

Ключевые слова, используемые при создании, возврате и вызове:
var – используется для объявления переменных
new – используется при создании объектов
return – используется для возвращения значения из метода
this – ссылка в методе на текущий объект
super – ссылка на объект суперкласса (класса-родителя)

        Группа 6 — Обработка исключительных ситуаций
Ключевые слова, используемые при обработке исключительных ситуаций:
try – определяет блок кода, в котором контролируется возникновение исключений инструкций
catch – определяет блок кода, который будет выполнен при возникновении исключения
finally – определяет блок кода, который будет выполнен вне зависимости от возникновения исключения
throw – используется для генерации (выбрасывания) исключения
throws – используется для определения списка исключений, которые могут генерироваться внутри метода

        Группа 7 — Многопоточное программирование
Ключевые слова, используемые при многопоточном программировании:
synchronized – определяет, что метод или блок кода может быть использован только в одном потоке в один квант времени
volatile – определяет, что изменение значения переменной одним потоком будет видно другим потокам
 Группа 8 — Другие
Ключевые слова, которые не вошли ни в одну из вышеперечисленных групп:
instanceof – оператор, используемый для проверки, является ли объект экземпляром определенного класса или интерфейса
assert – позволяет проверять данные и прерывать выполнение
transient – применяется к полям класса и означает, что данное поле не входит в сохраняемое состояние класса
strictfp – гарантирует, что выполнение вычислений с плавающей точкой будет проводиться на всех платформах одинаково
