Объектно-ориентированное программирование — это подход к разработке программного
обеспечения, основанный на представлении программы в виде совокупности объектов, каждый
из которых является экземпляром некоторого класса, образующих иерархические конструкции.
Например, иерархическая конструкция транспортных средств;

Классы можно рассматривать как некоторые описания, схемы или чертежи, по которым создаются
объекты. Имея один класс, можно создать неограниченное количество объектов, каждый из которых
будет обладать одинаковым поведением и набором характеристик.

Класс — это описание, объект — это реальное воплощение.

        **То есть класс – это абстрактный тип данных, который определяет форму и поведение объекта с
помощью полей и методов:

    ***Поля*** – это свойства (данные, атрибуты), которые представляют содержание, внутреннее состояние объекта.
    ***Методы*** – это функции, определяющие поведение объекта. Они описывают операции, выполняемые над данными.

Всё является объектом. Объект может хранить информацию, а также преобразовывать ее. В принципе,
любой элемент решаемой задачи (дом, собака, услуга, химическая реакция) может представлять собой
объект. Объект можно представить себе как швейцарский нож: он является набором различных ножей и
"открывашек" (хранение), но в то же самое время им мы можем резать или открывать что-либо
(преобразование).

Программа — совокупность объектов, указывающих друг другу что необходимо делать. Для обращения
к одному объекту другой объект "посылает ему сообщение". Возможно и "ответное сообщение". Например,
программу можно представить как совокупность трех объектов: писателя, ручки и листа бумаги.
Писатель "посылает сообщение" ручке, которая, в свою очередь, "посылает сообщение" листу бумаги.
В результате мы видим текст (посыл сообщения от листа к писателю).


Инкапсуляция

        ****Инкапсуляция – это свойство, позволяющее объединить в классе данные и методы, работающие с
ними, и скрыть детали реализации от пользователя.

        ****Наследование – это свойство, позволяющее создать новый класс на основе уже существующего, при этом
характеристики класса-родителя присваиваются классу-потомку.

        ****Полиморфизм – это свойство классов, позволяющее использовать объекты классов с одинаковым
интерфейсом без информации о конкретном типе и внутренней структуре объекта.


        ****Поле – это объявление или описание переменной. Класс может содержать любой из следующих видов переменных.

***Локальные переменные определяются внутри методов, конструкторов или блоков. Они объявляются и инициализируются в этих конструкциях, а по выходу из них уничтожаются.

***Переменные экземпляра определяются в пределах класса, но снаружи любого метода. Они инициализируются при создании объекта класса. Эти переменные доступны внутри любого метода экземпляра, конструктора или блока инициализации.

***Переменные класса (статические переменные) объявляются в теле класса вне любого метода с помощью ключевого слова static. Они инициализируются при формировании класса и доступны во всех методах, конструкторах и блоках инициализации.

    ***Методы*** используются для выполнения действий над данными класса (полями) и предоставляют доступ к
этим данным. Они содержат объявление параметров, локальных переменных и операторов Java, которые
выполняются при вызове метода. Методы могут возвращать результат своей работы вызывающему его коду.
Также они могут принимать параметры (аргументы), которые являются значениями, вызвавшим метод кодом.

Имя метода должно:

начинаться со слова в нижнем регистре (исключение составляют конструкторы – специальные методы для создания объектов)
содержать название производимого действия – глагол
быть информативным, в связи с чем может состоять из нескольких слов: второе и последующие слова указываются с заглавной буквы (camelCase нотация).

Вызов метода – это передача методу управления для исполнения.

Для выполнения своей работы методу может понадобиться некоторое количество данных.

Значение, передаваемое методу, называется аргументом.
Переменная, получающая аргумент, называется формальным параметром или просто параметром.

Java предоставляет возможность описывать метод, который может быть вызван с разным количеством
аргументов определенного типа. Такие методы называются методами переменной арности.
