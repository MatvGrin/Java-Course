Как вы уже знаете, можно создавать несколько объектов одного и того же типа. Каждый объект
будет содержать свою копию набора полей с собственными значениями. Однако методы не дублируются.
Возникает вопрос: как методу разобраться, с каким набором значений полей (объектом) он сейчас
выполняется? Другими словами, методу нужна информация о вызвавшем его объекте.

Ключевое слово this – это ссылка на текущий объект внутри класса, то есть объект, для которого
выполняются метод или конструктор. Слово this используется для обращения к любому члену текущего
объекта внутри метода экземпляра или конструктора.

Например, класс Car. У этого класса есть поле с именем speed, и метод setSpeed()  имеет параметр
с именем speed. Внутри этого метода параметр перекрывает область видимости поля. Чтобы различить
обращение к полю, перед ним указывается ссылка this (обращение к текущему объекту).

Наиболее распространенная причина для использования ключевого слова this – необходимость
различать поля и локальные переменные/параметры, если они имеют одинаковые имена.


Существуют особые методы доступа к закрытым полям класса:

Геттер – это метод для получения значения поля. Имя метода начинается с глагола get, а дальше следует название поля в стиле camelCase.
Сеттер – это метод для установки значения поля. Имя метода начинается с глагола set, а дальше следует название поля в стиле camelCase.

Если при описании конструктора указать тип возвращаемого значения, то Java воспримет его
как метод класса, а не конструктор. Например, void Car(String carModel) { }

Конструктор без параметров – это конструктор, который не имеет параметров и используется для
инициализации полей экземпляра нулевыми значениями либо некоторыми предопределенными/начальными.


Любой конструктор может ссылаться на другой конструктор в том же классе, используя ключевое слово this:

это осуществляется без использования оператора new
вместо имени класса следует применить ключевое слово this
обращение к другому конструктору должно быть первым действием в теле такого конструктора.

