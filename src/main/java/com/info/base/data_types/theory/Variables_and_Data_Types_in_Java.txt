***Переменная*** – это именованный программный объект, который хранит значение заявленного типа
и в ходе исполнения программы может менять это значение. Каждая переменная имеет идентификатор
– это имя переменной. Идентификатор представляет собой ссылку на некоторый адрес памяти, по
которому размещено значение переменной.

                ****Типы данных и место их хранения****

***Стек*** – это область памяти для работы с локальными переменными по мере выполнения программы.
Стек постоянно заполняется и освобождается. Важно, чтобы стек работал быстро, так как от
этого зависит быстродействие всей программы. Поэтому в него помещают только небольшие данные
, для которых предварительно известен их размер. Все остальные данные помещают в кучу – большую
область памяти, доступ к которой не такой быстрый, зато в нее можно поместить большие, составные объекты.

Поэтому в Java существует две разновидности типов данных:

***примитивные*** – преимущественно для работы с числами ссылочные – для переменных таких типов
в стеке хранится только адрес ячейки памяти в куче, где находится связанный с этой переменной объект.

Согласно стандарту ***IEEE Std 1320.2-1998, тип данных (тип) *** – это множество значений и операций
над этими значениями. Также можно сказать, что тип данных – фундаментальное понятие теории
программирования. Тип данных определяет не только диапазон возможных значений и набор операций,
выполняемых над этими значениями, но и способ хранения значений и выполнения операций с ними.

***Литералы*** – это явно заданные значения определенного типа в коде программы. Можно сказать, что
литералы являются представлением или отображением значения переменной.

В версии Java 10 в язык было добавлено ключевое слово ***var***, с помощью которого также возможно
определение переменной. Тип переменной будет такой же, как и у литерала, которым ее инициализируют.


        *-**-*-Класс Math содержит приближенные значения математических констант – чисел "PI" и "E":-*-*-*-

    PI // 3.14159265358979323846
    E // 2.7182818284590452354
            Набор базовых математических методов:

abs - возвращает модуль числа: Math.abs(-4) // 4;
max - возвращает наибольшее из двух чисел: Math.max(1, 2) // 2
min- возвращает наименьшее из двух чисел: Math.min(1, 2) // 1
Набор тригонометрических функций, которые принимают на вход величину угла в радианах:

sin- возвращает синус угла: Math.sin(0) // 0
cos – возвращает косинус угла: Math.cos(0) // 1
tan – возвращает тангенс угла: Math.tan(0) // 0
asin – возвращает арксинус угла: Math.asin(0) // 0
acos – возвращает арккосинус угла: Math.acos(1) // 0
atan – возвращает арктангенс угла: Math.atan(0) // 0
Еще пара удобных методов для преобразования градусов в радианы и наоборот:

toRadians: toRadians(1) // 0.017453292519943295
toDegrees: toDegrees(1) // 57.29577951308232
Методы для работы со степенями:

exp – возвращает e в степени x: Math.exp(1) // 2.7182818284590452354
log – возвращает значение логарифма по основанию е: Math.log(Math.E) // 1
log10 – возвращает значение логарифма по основанию 10: Math.log10(100) // 2
sqrt – возвращает значение квадратного корня: Math.sqrt(16) // 4
cbrt – возвращает значение кубического корня: Math.cbrt(-8) // -2
pow – возвращает результат возведения в заданную степень: Math.pow(2, 4) // 16
Основные методы округления:

ceil – округление до большего значения: Math.ceil(3.3) // 4
floor – округление до меньшего значения: Math.floor(5.7) // 5
round – округление по стандартным математическим правилам: Math.round(5.8) // 6
Метод для получения случайного значения:

random – возвращает случайное значение типа double в пределах [0;1)

Объекты в Java размещаются и хранятся куче. Исполнительная система Java выделяет память ****
под хранение объекта, когда вы запрашиваете ее с помощью оператора new.
Строковый литерал – это множество символов, заключенных в двойные кавычки. Все
строковые литералы компилятор оборачивает в объект класса String со значением этого
литерала. Тип String – это ссылочный тип данных, соответственно значения строк хранятся в куче.


        ***CamelCase*** нотации следуют имена локальных переменных, полей классов и параметров методов, имена методов (должны содержать глаголы).
        ***TitleCase*** нотации следуют имена классов, интерфейсов, аннотаций и перечислений. Имена классов и перечислений должны быть именами существительными, а имена интерфейсов, как правило, —прилагательными.
Имена переменных с неизменяемыми значениями указываются в верхнем регистре, а слова разделяются символом нижнего подчеркивания.
Имена пакетов имеют префикс, который всегда указывается в нижнем регистре и отражает доменное имя верхнего уровня: com, edu, gov, mil, net, org или двухбуквенный код страны.
Имена параметров типов обобщений должны быть одиночной заглавной буквой.